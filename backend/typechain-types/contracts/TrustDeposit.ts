/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface TrustDepositInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "arbitrator"
      | "backendSigner"
      | "escalateDispute"
      | "holdDeposit"
      | "leases"
      | "owner"
      | "releaseDeposit"
      | "renounceOwnership"
      | "resolveDispute"
      | "setArbitrator"
      | "setBackendSigner"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ArbitratorChanged"
      | "DepositHeld"
      | "DepositReleased"
      | "DisputeEscalated"
      | "DisputeResolved"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "arbitrator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "backendSigner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "escalateDispute",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "holdDeposit",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "leases", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "releaseDeposit",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resolveDispute",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setArbitrator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setBackendSigner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "arbitrator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "backendSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "escalateDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "holdDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "leases", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releaseDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setArbitrator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBackendSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace ArbitratorChangedEvent {
  export type InputTuple = [newArbitrator: AddressLike];
  export type OutputTuple = [newArbitrator: string];
  export interface OutputObject {
    newArbitrator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositHeldEvent {
  export type InputTuple = [
    leaseId: BytesLike,
    tenant: AddressLike,
    landlord: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    leaseId: string,
    tenant: string,
    landlord: string,
    amount: bigint
  ];
  export interface OutputObject {
    leaseId: string;
    tenant: string;
    landlord: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositReleasedEvent {
  export type InputTuple = [
    leaseId: BytesLike,
    tenantShare: BigNumberish,
    landlordShare: BigNumberish
  ];
  export type OutputTuple = [
    leaseId: string,
    tenantShare: bigint,
    landlordShare: bigint
  ];
  export interface OutputObject {
    leaseId: string;
    tenantShare: bigint;
    landlordShare: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisputeEscalatedEvent {
  export type InputTuple = [leaseId: BytesLike, caller: AddressLike];
  export type OutputTuple = [leaseId: string, caller: string];
  export interface OutputObject {
    leaseId: string;
    caller: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisputeResolvedEvent {
  export type InputTuple = [
    leaseId: BytesLike,
    tenantShare: BigNumberish,
    landlordShare: BigNumberish
  ];
  export type OutputTuple = [
    leaseId: string,
    tenantShare: bigint,
    landlordShare: bigint
  ];
  export interface OutputObject {
    leaseId: string;
    tenantShare: bigint;
    landlordShare: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TrustDeposit extends BaseContract {
  connect(runner?: ContractRunner | null): TrustDeposit;
  waitForDeployment(): Promise<this>;

  interface: TrustDepositInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  arbitrator: TypedContractMethod<[], [string], "view">;

  backendSigner: TypedContractMethod<[], [string], "view">;

  escalateDispute: TypedContractMethod<
    [leaseId: BytesLike],
    [void],
    "nonpayable"
  >;

  holdDeposit: TypedContractMethod<
    [leaseId: BytesLike, landlord: AddressLike],
    [void],
    "payable"
  >;

  leases: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, bigint, boolean, boolean] & {
        tenant: string;
        landlord: string;
        amount: bigint;
        active: boolean;
        disputed: boolean;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  releaseDeposit: TypedContractMethod<
    [leaseId: BytesLike, tenantShareWei: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  resolveDispute: TypedContractMethod<
    [leaseId: BytesLike, tenantShareWei: BigNumberish],
    [void],
    "nonpayable"
  >;

  setArbitrator: TypedContractMethod<
    [_newArb: AddressLike],
    [void],
    "nonpayable"
  >;

  setBackendSigner: TypedContractMethod<
    [_newSigner: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "arbitrator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "backendSigner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "escalateDispute"
  ): TypedContractMethod<[leaseId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "holdDeposit"
  ): TypedContractMethod<
    [leaseId: BytesLike, landlord: AddressLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "leases"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, bigint, boolean, boolean] & {
        tenant: string;
        landlord: string;
        amount: bigint;
        active: boolean;
        disputed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "releaseDeposit"
  ): TypedContractMethod<
    [leaseId: BytesLike, tenantShareWei: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resolveDispute"
  ): TypedContractMethod<
    [leaseId: BytesLike, tenantShareWei: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setArbitrator"
  ): TypedContractMethod<[_newArb: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBackendSigner"
  ): TypedContractMethod<[_newSigner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "ArbitratorChanged"
  ): TypedContractEvent<
    ArbitratorChangedEvent.InputTuple,
    ArbitratorChangedEvent.OutputTuple,
    ArbitratorChangedEvent.OutputObject
  >;
  getEvent(
    key: "DepositHeld"
  ): TypedContractEvent<
    DepositHeldEvent.InputTuple,
    DepositHeldEvent.OutputTuple,
    DepositHeldEvent.OutputObject
  >;
  getEvent(
    key: "DepositReleased"
  ): TypedContractEvent<
    DepositReleasedEvent.InputTuple,
    DepositReleasedEvent.OutputTuple,
    DepositReleasedEvent.OutputObject
  >;
  getEvent(
    key: "DisputeEscalated"
  ): TypedContractEvent<
    DisputeEscalatedEvent.InputTuple,
    DisputeEscalatedEvent.OutputTuple,
    DisputeEscalatedEvent.OutputObject
  >;
  getEvent(
    key: "DisputeResolved"
  ): TypedContractEvent<
    DisputeResolvedEvent.InputTuple,
    DisputeResolvedEvent.OutputTuple,
    DisputeResolvedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "ArbitratorChanged(address)": TypedContractEvent<
      ArbitratorChangedEvent.InputTuple,
      ArbitratorChangedEvent.OutputTuple,
      ArbitratorChangedEvent.OutputObject
    >;
    ArbitratorChanged: TypedContractEvent<
      ArbitratorChangedEvent.InputTuple,
      ArbitratorChangedEvent.OutputTuple,
      ArbitratorChangedEvent.OutputObject
    >;

    "DepositHeld(bytes32,address,address,uint256)": TypedContractEvent<
      DepositHeldEvent.InputTuple,
      DepositHeldEvent.OutputTuple,
      DepositHeldEvent.OutputObject
    >;
    DepositHeld: TypedContractEvent<
      DepositHeldEvent.InputTuple,
      DepositHeldEvent.OutputTuple,
      DepositHeldEvent.OutputObject
    >;

    "DepositReleased(bytes32,uint256,uint256)": TypedContractEvent<
      DepositReleasedEvent.InputTuple,
      DepositReleasedEvent.OutputTuple,
      DepositReleasedEvent.OutputObject
    >;
    DepositReleased: TypedContractEvent<
      DepositReleasedEvent.InputTuple,
      DepositReleasedEvent.OutputTuple,
      DepositReleasedEvent.OutputObject
    >;

    "DisputeEscalated(bytes32,address)": TypedContractEvent<
      DisputeEscalatedEvent.InputTuple,
      DisputeEscalatedEvent.OutputTuple,
      DisputeEscalatedEvent.OutputObject
    >;
    DisputeEscalated: TypedContractEvent<
      DisputeEscalatedEvent.InputTuple,
      DisputeEscalatedEvent.OutputTuple,
      DisputeEscalatedEvent.OutputObject
    >;

    "DisputeResolved(bytes32,uint256,uint256)": TypedContractEvent<
      DisputeResolvedEvent.InputTuple,
      DisputeResolvedEvent.OutputTuple,
      DisputeResolvedEvent.OutputObject
    >;
    DisputeResolved: TypedContractEvent<
      DisputeResolvedEvent.InputTuple,
      DisputeResolvedEvent.OutputTuple,
      DisputeResolvedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
